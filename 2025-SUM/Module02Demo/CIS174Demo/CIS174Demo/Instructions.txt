1) Install Microsoft.EntityFrameworkCore.SqlServer
2) Install Microsoft.EntityFrameworkCore.Tools
3) Create 'Movie' model
    public class Movie
    {
        // EF will instruct the database to automatically generate this value
        public int MovieId { get; set; }

        [Required(ErrorMessage = "Please enter a name.")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Please enter a year.")]
        [Range(1889, 2050, ErrorMessage = "Year must be between 1889 and now.")]
        public int? Year { get; set; }

        [Required(ErrorMessage = "Please enter a rating.")]
        [Range(1, 5, ErrorMessage = "Rating must be between 1 and 5.")]
        public int? Rating { get; set; }

        public string Slug => 
            Name?.Replace(' ', '-').ToLower() + '-' + Year?.ToString();
    }
4) Create 'MovieContext' DbContext
    public class MovieContext : DbContext
    {
        public MovieContext(DbContextOptions<MovieContext> options)
            : base(options)
        { }

        public DbSet<Movie> Movies { get; set; }
    }
5) Seed initial data in 'MovieContext'
    protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Movie>().HasData(
                new Movie {
                    MovieId = 4,
                    Name = "Casablanca",
                    Year = 1943,
                    Rating = 5,
                    //GenreId = "D"
                },
                new Movie {
                    MovieId = 2,
                    Name = "Wonder Woman",
                    Year = 2017,
                    Rating = 3,
                    //GenreId = "A"
                },
                new Movie {
                    MovieId = 3,
                    Name = "Moonstruck",
                    Year = 1988,
                    Rating = 4,
                    //GenreId = "R"
                }
            );
        }
6) Setup Connection String (replace your server name and instance)
  "ConnectionStrings": {
    "MovieContext": "Server=DESKTOP-53R4CQT\\MSSQLSERVER01;Database=Movies;Trusted_Connection=True;MultipleActiveResultSets=true"
  }
7) Add DI for DbContext
    builder.Services.AddDbContext<MovieContext>(options =>
        options.UseSqlServer(builder.Configuration.GetConnectionString("MovieContext")));
9) Package Manager Console
    Add-Migration Initial -> Creates YYYYMMDD#####_Initial.cs
    Update-Database -> Creates the database
10) Validate files and database were created correctly
11) Use Linq in 'HomeController' to query movies
        public IActionResult Index()
        {
            var movies = context.Movies
                .OrderBy(m => m.Name)
                .ToList();
            return View(movies);
        }
12) Update 'appsettings.json' to display the queries
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information",
      "Microsoft.EntityFrameworkCore.Database.Command": "Debug"
    }
  }
13) 'HomeController'
    public class HomeController : Controller
    {
        private MovieContext context { get; set; }

        public HomeController(MovieContext ctx)
        {
            context = ctx;
        }

        public IActionResult Index()
        {
            var movies = context.Movies.OrderBy(m => m.Name).ToList();
            return View(movies);
        }
    }
14) Add UI to 'Index.cshtml'
@model List<Movie>
@{
    ViewBag.Title = "My Movies";
}

<h2>Movie List</h2>
<a asp-controller="Movie" asp-action="Add">Add New Movie</a>
<table class="table table-hover">
    <thead>
        <tr><th>Name</th><th>Year</th><th>Genre</th><th>Rating</th><th></th></tr>
    </thead>
    <tbody>
        @foreach (var movie in Model) {
        <tr>
            <td>@movie.Name</td>
            <td>@movie.Year</td>
            <td>@movie.Rating</td>
            <td>
                <a asp-controller="Movie" asp-action="Edit"
                   asp-route-id="@movie.MovieId"
                   asp-route-slug="@movie.Slug"
                   class="btn btn-primary">Edit</a>
                <a asp-controller="Movie" asp-action="Delete"
                   asp-route-id="@movie.MovieId"
                   asp-route-slug="@movie.Slug"
                   class="btn btn-primary">Delete</a>
            </td>
        </tr>
        }
    </tbody>
</table>
** Since I already created the movie files for this demo and they won't get changed
with genre changes I am going to just keep them created **
15) Create 'MovieController'
16) Create 'Movie\Edit.cshtml'
17) Create 'Movie\Delete.cshtml'
** Adding Genre **
18) Create 'Genre' model
    public class Genre
    {
        public string GenreId { get; set; }
        public string Name { get; set; }
    }
19) Add reference to 'Movie' model
       [Required(ErrorMessage = "Please enter a genre.")]
        public string GenreId { get; set; }
        // .NET 6.0 will REQUIRE this if not nullable
        public Genre? Genre { get; set; }
20) Add Genre to 'MovieContext'
    public class MovieContext : DbContext
    {
        public MovieContext(DbContextOptions<MovieContext> options)
            : base(options)
        { }

        public DbSet<Movie> Movies { get; set; }
        public DbSet<Genre> Genres { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Movie>().HasData(
                new Movie {
                    MovieId = 4,
                    Name = "Casablanca",
                    Year = 1943,
                    Rating = 5,
                    GenreId = "D"
                },
                new Movie {
                    MovieId = 2,
                    Name = "Wonder Woman",
                    Year = 2017,
                    Rating = 3,
                    GenreId = "A"
                },
                new Movie {
                    MovieId = 3,
                    Name = "Moonstruck",
                    Year = 1988,
                    Rating = 4,
                    GenreId = "R"
                }
            );
            modelBuilder.Entity<Genre>().HasData(
                new Genre { GenreId = "A", Name = "Action" },
                new Genre { GenreId = "C", Name = "Comedy" },
                new Genre { GenreId = "D", Name = "Drama" },
                new Genre { GenreId = "H", Name = "Horror" },
                new Genre { GenreId = "M", Name = "Musical" },
                new Genre { GenreId = "R", Name = "RomCom" },
                new Genre { GenreId = "S", Name = "SciFi" }
            );
        }
    }
21) Create database migration
    Add-Migration Genre
    Update-Database
22) Include Genre in 'HomeController.Index'
            var movies = context.Movies.Include(m => m.Genre).OrderBy(m => m.Name).ToList();
23) Include Genre in 'Index.cshtml'
            <th>Genre</th>
            <td>@movie.Genre.Name</td>
24) Create Add, Edit, and Delete to 'MovieController'
25) Add Genre to 'Edit.cshtml'
@model Movie

@{
    string title = ViewBag.Action + " Movie";
    ViewBag.Title = title;
}

<h2>@title</h2>

<form asp-action="Edit" method="post">
    <div asp-validation-summary="All" class="text-danger"></div>

    <div class="form-group">
        <label asp-for="Name">Name</label>
        <input asp-for="Name" class="form-control">
    </div>

    <div class="form-group">
        <label asp-for="Year">Year</label>
        <input asp-for="Year" class="form-control">
    </div>

    <div class="form-group">
        <label asp-for="GenreId">Genre</label>
        <select asp-for="GenreId" class="form-control">
            <option value="">select a genre</option>
            @foreach (Genre g in ViewBag.Genres)
            {
                <option value="@g.GenreId">@g.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label asp-for="Rating">Rating</label>
        <input asp-for="Rating" class="form-control">
    </div>

    <input type="hidden" asp-for="MovieId" />

    <button type="submit" class="btn btn-primary">@ViewBag.Action</button>
    <a asp-controller="Home" asp-action="Index" class="btn btn-outline-secondary">Cancel</a>
</form>
26) Add lowercase and trailing slash to 'Startup.ConfigureService'
            services.AddRouting(options => {
                options.LowercaseUrls = true;
                options.AppendTrailingSlash = true;
            });
27) Add slug to 'Startup'
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}/{slug?}");
            });
28) Add property to 'Movie'
        public string Slug => 
            Name?.Replace(' ', '-').ToLower() + '-' + Year?.ToString();
29) Add slugs asp-route-slug to 'Index.cshtml'
            <td>
                <a asp-controller="Movie" asp-action="Edit"
                   asp-route-id="@movie.MovieId"
                   asp-route-slug="@movie.Slug"
                   class="btn btn-primary">Edit</a>
                <a asp-controller="Movie" asp-action="Delete"
                   asp-route-id="@movie.MovieId"
                   asp-route-slug="@movie.Slug"
                   class="btn btn-primary">Delete</a>
            </td>
